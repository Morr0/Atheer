Parameters: 
  DBDatabaseName:
    Type: String
    Description: The name of the database hosting Atheer
    MinLength: "1"
    MaxLength: "63"
  DBRootUser:
    Type: String
    Description: The root user name of the DB
    MinLength: "4"
    MaxLength: "63"
  DBRootPassword:
    Type: String
    Description: The root password of the DB
    MinLength: "8"
    MaxLength: "63"
  ServerInstanceType:
    Type: String
    Description: The type of the EC2 instance e.g. t2.micro
  ServerImage:
    Type: String
    Description: The AMI
  ServerInstanceStorageSize:
    Type: Number
    MinValue: 8
    Default: 10
    Description: The size in (GiB) of the instance root volume
  ServerKeyName:
    Type: String
    Description: A private key name to access the server via SSH. Don't include extension.
    MinLength: "1"
    Default: "testKey"
  PublicS3BucketName:
    Type: String
    Description: The name of the S3 bucket to deploy
    AllowedPattern: "[a-z-]*"

# TODO find an efficient way to refactor the availability zone used
Resources:
  # VPC
  Network:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
  NetworkInternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref NetworkInternetGateway
      VpcId: !Ref Network
  
  # - Route tables
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Network
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Network
    
  # - Routes 
  RouteToInternet:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NetworkInternetGateway
      
  # - Subnets
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref Network
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      MapPublicIpOnLaunch: false
  SecondPrivateSubnet:
    # \Because RDS Subnet group requires 2 zones
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Network
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Network
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      
  # - Subnets associations with Route tables
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

#  Database
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Network
      GroupDescription: Only allow VPC in
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          # from VPC only
          CidrIp: 10.0.0.0/16
  DatabaseSubnetGroup:
    DependsOn: 
      - Network
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The subnet for the database
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref SecondPrivateSubnet
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 24
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t3.micro
      DeleteAutomatedBackups: false
      DeletionProtection: true
      Engine: postgres
      EngineVersion: "12.5"
      # TODO switch to gp3 when supported
      StorageType: gp2
      DBInstanceIdentifier: database
      DBName: !Ref DBDatabaseName
      MasterUsername: !Ref DBRootUser
      MasterUserPassword: !Ref DBRootPassword
      Port: "5432"
      PubliclyAccessible: false
      VPCSecurityGroups:
        - Fn::GetAtt: [ DatabaseSecurityGroup, GroupId ]
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      
  # S3
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref PublicS3BucketName
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"

  # Server
  ServerRole:
    Type: AWS::IAM::Role
    Properties: 
      # This one makes sure this policy is for EC2 instances
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      # The actual policies
      Policies: 
        - PolicyName: ServerRolePolicies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "ssm:Describe*"
                  - "ssm:Get*"
                  - "ssm:List*"
                Resource: "*"
  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref ServerRole
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Server Security Group
      GroupDescription: Allow public traffic in
      VpcId: !Ref Network
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  Server:
    DependsOn: 
      - Database
    Type: AWS::EC2::Instance
    Properties: 
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref ServerInstanceStorageSize
            VolumeType: gp3
            DeleteOnTermination: true
      KeyName: !Ref ServerKeyName
      ImageId: !Ref ServerImage
      InstanceType: !Ref ServerInstanceType
      IamInstanceProfile: !Ref ServerInstanceProfile
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref ServerSecurityGroup
      UserData:
        !Base64 |
        #!/bin/bash
        apt-get update -y
        apt-get upgrade -y
        apt install git -y
        apt install tmux -y
        apt install postgresql-client -y
        # Install dotnet - BEGIN
        # https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#2004-
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update -y; \
          sudo apt-get install -y apt-transport-https && \
          sudo apt-get update && \
          sudo apt-get install -y dotnet-sdk-5.0
        sudo apt-get update -y; \
          sudo apt-get install -y apt-transport-https && \
          sudo apt-get update && \
          sudo apt-get install -y aspnetcore-runtime-5.0
        ## END
        cd /home/ubuntu/
        mkdir atheer
        cd atheer
        git clone https://github.com/Morr0/Atheer .
        cd Atheer
        dotnet restore
        # Install dotnet-ef to make the database up-to-date
        dotnet tool uninstall --global dotnet-ef
        dotnet tool install --global dotnet-ef
        export ASPNETCORE_ENVIRONMENT="Production"
        dotnet ef database update
        # Create a detached tmux session and run the website in it
        tmux new-session -d -s server "dotnet run --environment Production"