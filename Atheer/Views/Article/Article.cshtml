@using Markdig
@using Atheer.ViewComponents
@using Atheer.Controllers
@using Atheer.Extensions
@inject MarkdownPipeline MarkdownPipeline
@model Atheer.Controllers.ViewModels.ArticleViewModel
@{
    var article = Model.Article;
    ViewData["Title"] = article.Title;
    string content = article.Content is null ? "" : Markdown.ToHtml(article.Content, MarkdownPipeline);

    string tags = Tag.TagsAsString(Model.Tags);
    
    string dateStr = DateTimeExtensions.GetDateOnly(article.CreationDate);

    string viewerUserId = User.FindFirst(AuthenticationController.CookieUserId)?.Value;
    bool isAuthor = viewerUserId == Model.Article.AuthorId;
    
    string scheduledSince = DateTimeExtensions.GetDateOnly(@Model.Article.ScheduledSinceDate);
    bool scheduled = isAuthor && article.Scheduled && !string.IsNullOrEmpty(scheduledSince);
}

@section Head
{
    <style type="text/css">
        .go-up-btn {
            position: fixed;
            bottom: 50px;
            right: 50px;
            width: 4rem;
            height: 4rem;
            overflow: hidden;
            z-index: 999;
        }
    </style>
}

<div class="container">
    <div class="card-header">
        <h6 class="card-subtitle">@tags</h6>
        
        <h2 class="text-dark">@article.Title</h2>
        <span class="card-subtitle">
            By <a asp-controller="User" asp-action="UserView" asp-route-userId="@Model.Article.AuthorId" class="card-link">
                @Model.AuthorFullName
            </a>
            @if (!scheduled)
            {
                <span>since @dateStr</span>
            }
        </span>

        @if (isAuthor)
        {
            <span class="text-info">Mine</span>
        }

        @if (article.Draft)
        {
            <span class="text-info">Draft</span>
        }
        @if (article.Unlisted)
        {
            <span class="text-info">Unlisted</span>
        }
        @if (scheduled)
        {
            <span class="text-info">Scheduled since @scheduledSince for @dateStr</span>
        }

        @await Component.InvokeAsync("ArticleEdit", new ArticleEditLinkModel(article, viewerUserId))
        <p class="card-text">@article.Description</p>
    </div>
    <div class="card-body">
        <div class="h-di"></div>
        @Html.Raw(content)
    </div>
    <div class="card-footer">
        @if (article.Likeable)
        {
            <label id="likes" for="like">@article.Likes.ToString() Likes | </label>
            <button type="button" class="btn btn-outline-secondary" id="like" value="Like"
                    onclick="like(@article.CreatedYear.ToString(), '@article.TitleShrinked')">Like</button>
        }
        @if (article.Shareable)
        {
            <button type="button" class="btn btn-outline-secondary" id="share" value="Share"
                    onclick="share(@article.CreatedYear.ToString(), '@article.TitleShrinked')">Share</button>
        }
        <span class="text-info" id="shareInfo"></span>
    </div>
</div>

<button type="button" class="btn btn-info rounded-circle go-up-btn" hidden id="go-up-btn">Up</button>

@section Scripts
{
<script>
const halfHeight = window.innerHeight / 5;
const goUpBtn = document.getElementById("go-up-btn");
window.addEventListener("scroll", (event) => {
    goUpBtn.hidden = window.scrollY <= halfHeight;
});

window.scrollBy({
   behavior: "smooth",
   top: 0,
   left: 250
});

goUpBtn.addEventListener("click", () => {
    window.scrollTo({
        top: 0,
        left: window.screenX,
        behavior: "smooth"
    });
});
</script>
}
