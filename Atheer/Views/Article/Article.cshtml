@using Markdig
@using Atheer.ViewComponents
@using Atheer.Controllers
@using Atheer.Controllers.Authentication
@using Atheer.Extensions
@inject MarkdownPipeline MarkdownPipeline
@model Atheer.Controllers.Article.Models.ArticleViewModel
@{
    var article = Model.Article;
    ViewData["Title"] = article.Title;
    string content = article.Content is null ? "" : Markdown.ToHtml(article.Content, MarkdownPipeline);

    string tags = string.Join(", ", Model.Tags);
    
    string viewerUserId = User.FindFirst(AuthenticationController.CookieUserId)?.Value;
    bool isAuthor = viewerUserId == Model.Article.AuthorId;
    
    string scheduledSince = DateTimeExtensions.GetDateOnly(@Model.Article.ScheduledSinceDate);
    bool scheduled = isAuthor && article.Scheduled && !string.IsNullOrEmpty(scheduledSince);

    bool narrated = Model.Article.Narratable && !string.IsNullOrEmpty(Model.Article.NarrationMp3Url);
    
    bool isPartOfSeries = (Model.SeriesArticles is not null) && (Model.SeriesArticles.SeriesId is not null);
}

@section Head
{
    <style type="text/css">
        .go-up-btn {
            position: fixed;
            bottom: 50px;
            right: 50px;
            width: 4rem;
            height: 4rem;
            overflow: hidden;
            z-index: 999;
        }
    </style>
}

<div class="container">
    <div class="card-header">
        <h6 class="card-subtitle">@tags</h6>
        
        <h2 class="text-dark">@article.Title</h2>
        @if (isAuthor)
        {
            <span class="text-info">Mine</span>
            <a asp-controller="ArticleEdit" asp-action="Index" asp-route-CreatedYear="@Model.Article.CreatedYear.ToString()" 
               asp-route-TitleShrinked="@Model.Article.TitleShrinked">Edit</a>
        }
        <span class="card-subtitle">
            By <a asp-controller="User" asp-action="UserView" asp-route-userId="@Model.Article.AuthorId" class="card-link">
                @Model.AuthorFullName
            </a>
            @if (!scheduled)
            {
                <span>since @await Component.InvokeAsync("LocalDate", article.CreationDate)</span>
            }
        </span>

        @if (article.Draft)
        {
            <span class="text-info">Draft</span>
        }
        @if (article.Unlisted)
        {
            <span class="text-info">Unlisted</span>
        }
        @if (scheduled)
        {
            <span class="text-info">Scheduled since @scheduledSince for @await Component.InvokeAsync("LocalDate", article.CreationDate)</span>
        }
        
        <p class="card-text">@article.Description</p>
        
        @if (narrated)
        {
            <a href="@Model.Article.NarrationMp3Url" target="_blank" class="link-info">Click here to listen to article</a>
        }
    </div>
    <div class="card-body">
        @if (isPartOfSeries)
        {
            <div>
                <h5 class="text-dark">Series: @Model.SeriesArticles.SeriesTitle</h5>
                <ul class="list-group">
                    @foreach (var seriesArticle in Model.SeriesArticles.Articles)
                    {
                        <li class="list-group-item">
                            @if (Model.Article.CreatedYear == seriesArticle.CreatedYear && 
                                 Model.Article.TitleShrinked == seriesArticle.TitleShrinked)
                            {
                                @seriesArticle.Title
                            }
                            else
                            {
                                <a asp-controller="Article" asp-action="Index"
                                   asp-route-CreatedYear="@seriesArticle.CreatedYear" asp-route-TitleShrinked="@seriesArticle.TitleShrinked">
                                    @seriesArticle.Title
                                </a>
                            }
                        </li>
                    }
                    </ul>
                </div>
                <br>
            }
        <div class="text-dark" hidden id="tocOuter">
            <h3>Table of Contents</h3>
            <div id="toc"></div>
            <br>
        </div>
        <div class="h-di"></div>
        @Html.Raw(content)
    </div>
    <div class="card-footer">
        @if (article.Likeable)
        {
            <label id="likes" for="like">@article.Likes.ToString() Likes | </label>
            <button type="button" class="btn btn-outline-secondary" id="like" value="Like"
                    onclick="like(@article.CreatedYear.ToString(), '@article.TitleShrinked')">Like</button>
        }
        @if (article.Shareable)
        {
            <button type="button" class="btn btn-outline-secondary" id="share" value="Share"
                    onclick="share(@article.CreatedYear.ToString(), '@article.TitleShrinked')">Share</button>
        }
        <span class="text-info" id="shareInfo"></span>
    </div>
</div>

<button type="button" class="btn btn-info rounded-circle go-up-btn" hidden id="go-up-btn">Up</button>

@section Scripts
{
    <script>
const halfHeight = window.innerHeight / 5;
const goUpBtn = document.getElementById("go-up-btn");
window.addEventListener("scroll", (event) => {
    goUpBtn.hidden = window.scrollY <= halfHeight;
});

window.scrollBy({
   behavior: "smooth",
   top: 0,
   left: 250
});

goUpBtn.addEventListener("click", () => {
    window.scrollTo({
        top: 0,
        left: window.screenX,
        behavior: "smooth"
    });
});

const jumpableHeaders = document.querySelectorAll(".jumpableHeader");
if (jumpableHeaders.length > 0){
    let string = [`<ul class="list-group flex-grow-0">`];
    for (let header of jumpableHeaders) {
        const name = header.innerText.replace(":", "");
        string.push(`<li class="list-group-item"><a href="#${header.id}">${name}</a></li>`);
    }
    string.push("</ul>");
    
    const tableOfContentsDiv = document.getElementById("toc").innerHTML = string.join("");
    document.getElementById("tocOuter").hidden = false;
}  
</script>
}
